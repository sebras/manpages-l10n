'\" t
.TH "SYSTEMD\-STUB" "7" "" "systemd 251" "systemd-stub"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd-stub, sd-stub, linuxx64.efi.stub, linuxia32.efi.stub, linuxaa64.efi.stub \- A simple UEFI kernel boot stub
.SH "SYNOPSIS"
.PP
/usr/lib/systemd/boot/efi/linuxx64\&.efi\&.stub
.PP
/usr/lib/systemd/boot/efi/linuxia32\&.efi\&.stub
.PP
/usr/lib/systemd/boot/efi/linuxaa64\&.efi\&.stub
.PP
\fIESP\fR/\&.\&.\&./\fIfoo\fR\&.efi\&.extra\&.d/*\&.cred
.PP
\fIESP\fR/\&.\&.\&./\fIfoo\fR\&.efi\&.extra\&.d/*\&.raw
.PP
\fIESP\fR/loader/credentials/*\&.cred
.SH "DESCRIPTION"
.PP
\fBsystemd\-stub\fR
(stored in per\-architecture files
linuxx64\&.efi\&.stub,
linuxia32\&.efi\&.stub,
linuxaa64\&.efi\&.stub
on disk) is a simple UEFI boot stub\&. An UEFI boot stub is attached to a Linux kernel binary image, and is a piece of code that runs in the UEFI firmware environment before transitioning into the Linux kernel environment\&. The UEFI boot stub ensures a Linux kernel is executable as regular UEFI binary, and is able to do various preparations before switching the system into the Linux world\&.
.PP
The UEFI boot stub looks for various resources for the kernel invocation inside the UEFI PE binary itself\&. This allows combining various resources inside a single PE binary image, which may then be signed via UEFI SecureBoot as a whole, covering all individual resources at once\&. Specifically it may include:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The ELF Linux kernel images will be looked for in the
"\&.linux"
PE section of the executed image\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The initial RAM disk (initrd) will be looked for in the
"\&.initrd"
PE section\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A compiled binary DeviceTree will be looked for in the
"\&.dtb"
PE section\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The kernel command line to pass to the invoked kernel will be looked for in the
"\&.cmdline"
PE section\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A boot splash (in Windows
\&.BMP
format) to show on screen before invoking the kernel will be looked for in the
"\&.splash"
PE section\&.
.RE
.PP
If UEFI SecureBoot is enabled and the
"\&.cmdline"
section is present in the executed image, any attempts to override the kernel command line by passing one as invocation parameters to the EFI binary are ignored\&. Thus, in order to allow overriding the kernel command line, either disable UEFI SecureBoot, or don\*(Aqt include a kernel command line PE section in the kernel image file\&. If a command line is accepted via EFI invocation parameters to the EFI binary it is measured into TPM PCR 12 (if a TPM is present)\&.
.PP
If a DeviceTree is embedded in the
"\&.dtb"
section, it replaces an existing DeviceTree in the corresponding EFI configuration table\&. systemd\-stub will ask the firmware via the
"EFI_DT_FIXUP_PROTOCOL"
for hardware specific fixups to the DeviceTree\&.
.SH "COMPANION FILES"
.PP
The
\fBsystemd\-stub\fR
UEFI boot stub automatically collects two types of auxiliary companion files optionally placed in drop\-in directories on the same partition as the EFI binary, dynamically generates
\fBcpio\fR
initrd archives from them, and passes them to the kernel\&. Specifically:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
For a kernel binary called
\fIfoo\fR\&.efi, it will look for files with the
\&.cred
suffix in a directory named
\fIfoo\fR\&.efi\&.extra\&.d/
next to it\&. A
\fBcpio\fR
archive is generated from all files found that way, placing them in the
/\&.extra/credentials/
directory of the initrd file hierarchy\&. The main initrd may then access them in this directory\&. This is supposed to be used to store auxiliary, encrypted, authenticated credentials for use with
\fILoadCredentialEncrypted=\fR
in the UEFI System Partition\&. See
\fBsystemd.exec\fR(5)
and
\fBsystemd-creds\fR(1)
for details on encrypted credentials\&. The generated
\fBcpio\fR
archive is measured into TPM PCR 12 (if a TPM is present)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Similarly, files
\fIfoo\fR\&.efi\&.extra\&.d/*\&.raw
are packed up in a
\fBcpio\fR
archive and placed in the
/\&.extra/sysext/
directory in the initrd file hierarchy\&. This is supposed to be used to pass additional system extension images to the initrd\&. See
\fBsystemd-sysext\fR(8)
for details on system extension images\&. The generated
\fBcpio\fR
archive containing these system extension images is measured into TPM PCR 4 (if a TPM is present)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Files
/loader/credentials/*\&.cred
are packed up in a
\fBcpio\fR
archive and placed in the
/\&.extra/global_credentials/
directory of the initrd file hierarchy\&. This is supposed to be used to pass additional credentials to the initrd, regardless of the kernel being booted\&. The generated
\fBcpio\fR
archive is measured into TPM PCR 12 (if a TPM is present)
.RE
.PP
These mechanisms may be used to parameterize and extend trusted (i\&.e\&. signed), immutable initrd images in a reasonably safe way: all data they contain is measured into TPM PCRs\&. On access they should be further validated: in case of the credentials case by encrypting/authenticating them via TPM, as exposed by
\fBsystemd\-creds encrypt \-T\fR
(see
\fBsystemd-creds\fR(1)
for details); in case of the system extension images by using signed Verity images\&.
.SH "TPM2 PCR NOTES"
.PP
Note that when a unified kernel using
\fBsystemd\-stub\fR
is invoked the firmware will measure it as a whole to TPM PCR 4, covering all embedded resources, such as the stub code itself, the core kernel, the embedded initrd and kernel command line (see above for a full list)\&.
.PP
Also note that the Linux kernel will measure all initrds it receives into TPM PCR 9\&. This means every type of initrd will be measured twice: the initrd embedded in the kernel image will be measured to both PCR 4 and PCR 9; the initrd synthesized from credentials will be measured to both PCR 12 and PCR 9; the initrd synthesized from system extensions will be measured to both PCR 4 and PCR 9\&. Let\*(Aqs summarize the OS resources and the PCRs they are measured to:
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&1.\ \&OS Resource PCR Summary
.TS
allbox tab(:);
lB lB.
T{
OS Resource
T}:T{
Measurement PCR
T}
.T&
l l
l l
l l
l l
l l
l l
l l
l l.
T{
\fBsystemd\-stub\fR code (the entry point of the unified PE binary)
T}:T{
4
T}
T{
Boot splash (embedded in the unified PE binary)
T}:T{
4
T}
T{
Core kernel code (embedded in unified PE binary)
T}:T{
4
T}
T{
Main initrd (embedded in unified PE binary)
T}:T{
4 + 9
T}
T{
Default kernel command line (embedded in unified PE binary)
T}:T{
4
T}
T{
Overridden kernel command line
T}:T{
12
T}
T{
Credentials (synthesized initrd from companion files)
T}:T{
12 + 9
T}
T{
System Extensions (synthesized initrd from companion files)
T}:T{
4 + 9
T}
.TE
.sp 1
.SH "EFI VARIABLES"
.PP
The following EFI variables are defined, set and read by
\fBsystemd\-stub\fR, under the vendor UUID
"4a67b082\-0a4c\-41cf\-b6c7\-440b29bb8c4f", for communication between the boot stub and the OS:
.PP
\fILoaderDevicePartUUID\fR
.RS 4
Contains the partition UUID of the EFI System Partition the EFI image was run from\&.
\fBsystemd-gpt-auto-generator\fR(8)
uses this information to automatically find the disk booted from, in order to discover various other partitions on the same disk automatically\&.
.RE
.PP
\fILoaderFirmwareInfo\fR, \fILoaderFirmwareType\fR
.RS 4
Brief firmware information\&. Use
\fBbootctl\fR(1)
to view this data\&.
.RE
.PP
\fILoaderImageIdentifier\fR
.RS 4
The path of EFI executable, relative to the EFI System Partition\*(Aqs root directory\&. Use
\fBbootctl\fR(1)
to view this data\&.
.RE
.PP
\fIStubInfo\fR
.RS 4
Brief stub information\&. Use
\fBbootctl\fR(1)
to view this data\&.
.RE
.PP
Note that some of the variables above may also be set by the boot loader\&. The stub will only set them if they aren\*(Aqt set already\&. Some of these variables are defined by the
\m[blue]\fBBoot Loader Interface\fR\m[]\&\s-2\u[1]\d\s+2\&.
.SH "ASSEMBLING KERNEL IMAGES"
.PP
In order to assemble an UEFI PE kernel image from various components as described above, use an
\fBobjcopy\fR(1)
command line like this:
.sp
.if n \{\
.RS 4
.\}
.nf
objcopy \e
    \-\-add\-section \&.osrel=os\-release \-\-change\-section\-vma \&.osrel=0x20000 \e
    \-\-add\-section \&.cmdline=cmdline\&.txt \-\-change\-section\-vma \&.cmdline=0x30000 \e
    \-\-add\-section \&.dtb=devicetree\&.dtb \-\-change\-section\-vma \&.dtb=0x40000 \e
    \-\-add\-section \&.splash=splash\&.bmp \-\-change\-section\-vma \&.splash=0x100000 \e
    \-\-add\-section \&.linux=vmlinux \-\-change\-section\-vma \&.linux=0x2000000 \e
    \-\-add\-section \&.initrd=initrd\&.cpio \-\-change\-section\-vma \&.initrd=0x3000000 \e
    /usr/lib/systemd/boot/efi/linuxx64\&.efi\&.stub \e
    foo\-unsigned\&.efi
.fi
.if n \{\
.RE
.\}
.PP
This generates one PE executable file
foo\-unsigned\&.efi
from the six individual files for OS release information, kernel command line, boot splash image, kernel image, main initrd and UEFI boot stub\&.
.PP
To then sign the resulting image for UEFI SecureBoot use an
\fBsbsign\fR(1)
command like the following:
.sp
.if n \{\
.RS 4
.\}
.nf
sbsign \e
    \-\-key mykey\&.pem \e
    \-\-cert mykey\&.crt \e
    \-\-output foo\&.efi \e
    foo\-unsigned\&.efi
.fi
.if n \{\
.RE
.\}
.PP
This expects a pair of X\&.509 private key and certificate as parameters and then signs the UEFI PE executable we generated above for UEFI SecureBoot and generates a signed UEFI PE executable as result\&.
.SH "SEE ALSO"
.PP
\fBsystemd-boot\fR(7),
\fBsystemd.exec\fR(5),
\fBsystemd-creds\fR(1),
\fBsystemd-sysext\fR(8),
\m[blue]\fBBoot Loader Specification\fR\m[]\&\s-2\u[2]\d\s+2,
\m[blue]\fBBoot Loader Interface\fR\m[]\&\s-2\u[1]\d\s+2,
\fBobjcopy\fR(1),
\fBsbsign\fR(1)
.SH "NOTES"
.IP " 1." 4
Boot Loader Interface
.RS 4
\%https://systemd.io/BOOT_LOADER_INTERFACE
.RE
.IP " 2." 4
Boot Loader Specification
.RS 4
\%https://systemd.io/BOOT_LOADER_SPECIFICATION
.RE
