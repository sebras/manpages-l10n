.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Math::BigInt::FastCalc 3perl"
.TH Math::BigInt::FastCalc 3perl "2022-10-18" "perl v5.36.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigInt::FastCalc \- Math::BigInt::Calc with some XS for more speed
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # to use it with Math::BigInt
\&    use Math::BigInt lib => \*(AqFastCalc\*(Aq;
\&
\&    # to use it with Math::BigFloat
\&    use Math::BigFloat lib => \*(AqFastCalc\*(Aq;
\&
\&    # to use it with Math::BigRat
\&    use Math::BigRat lib => \*(AqFastCalc\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Math::BigInt::FastCalc inherits from Math::BigInt::Calc.
.PP
Provides support for big integer calculations. Not intended to be used by
other modules. Other modules which sport the same functions can also be used
to support Math::BigInt, like Math::BigInt::GMP or Math::BigInt::Pari.
.PP
In order to allow for multiple big integer libraries, Math::BigInt was
rewritten to use library modules for core math routines. Any module which
follows the same \s-1API\s0 as this can be used instead by using the following:
.PP
.Vb 1
\&    use Math::BigInt lib => \*(Aqlibname\*(Aq;
.Ve
.PP
\&'libname' is either the long name ('Math::BigInt::Pari'), or only the short
version like 'Pari'. To use this library:
.PP
.Vb 1
\&    use Math::BigInt lib => \*(AqFastCalc\*(Aq;
.Ve
.PP
The default behaviour is to chose the best internal representation of big
integers, but the base length used in the internal representation can be
specified explicitly. Note that this must be done before Math::BigInt is loaded.
For example,
.PP
.Vb 2
\&    use Math::BigInt::FastCalc base_len => 3;
\&    use Math::BigInt lib => \*(AqFastCalc\*(Aq;
.Ve
.SH "STORAGE"
.IX Header "STORAGE"
Math::BigInt::FastCalc works exactly like Math::BigInt::Calc. Numbers are
stored in decimal form chopped into parts.
.SH "METHODS"
.IX Header "METHODS"
The following functions are now implemented in FastCalc.xs:
.PP
.Vb 6
\&    _is_odd         _is_even        _is_one         _is_zero
\&    _is_two         _is_ten
\&    _zero           _one            _two            _ten
\&    _acmp           _len
\&    _inc            _dec
\&    _\|_strip_zeros   _copy
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-math\-bigint\-fastcalc at rt.cpan.org\*(C'\fR, or through the web interface at
<https://rt.cpan.org/Ticket/Create.html?Queue=Math\-BigInt\-FastCalc>
(requires login). We will be notified, and then you'll automatically be
notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
After installing, you can find documentation for this module with the perldoc
command.
.PP
.Vb 1
\&    perldoc Math::BigInt::FastCalc
.Ve
.PP
You can also look for information at:
.IP "GitHub" 4
.IX Item "GitHub"
<https://github.com/pjacklam/p5\-Math\-BigInt\-FastCalc>
.IP "\s-1RT: CPAN\s0's request tracker" 4
.IX Item "RT: CPAN's request tracker"
<https://rt.cpan.org/Dist/Display.html?Name=Math\-BigInt\-FastCalc>
.IP "MetaCPAN" 4
.IX Item "MetaCPAN"
<https://metacpan.org/release/Math\-BigInt\-FastCalc>
.IP "\s-1CPAN\s0 Testers Matrix" 4
.IX Item "CPAN Testers Matrix"
<http://matrix.cpantesters.org/?dist=Math\-BigInt\-FastCalc>
.IP "\s-1CPAN\s0 Ratings" 4
.IX Item "CPAN Ratings"
<https://cpanratings.perl.org/dist/Math\-BigInt\-FastCalc>
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Original math code by Mark Biggar, rewritten by Tels <http://bloodgate.com/>
in late 2000.
.PP
Separated from Math::BigInt and shaped \s-1API\s0 with the help of John Peacock.
.PP
Fixed, sped-up and enhanced by Tels http://bloodgate.com 2001\-2003.
Further streamlining (api_version 1 etc.) by Tels 2004\-2007.
.PP
Maintained by Peter John Acklam <pjacklam@gmail.com> 2010\-2021.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigInt::Lib for a description of the \s-1API.\s0
.PP
Alternative libraries Math::BigInt::Calc, Math::BigInt::GMP, and
Math::BigInt::Pari.
.PP
Some of the modules that use these libraries Math::BigInt,
Math::BigFloat, and Math::BigRat.
