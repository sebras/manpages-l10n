.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "ARCHINSTALL" "1" "Oct 12, 2022" "" "python-archinstall"
.SH NAME
archinstall \- archinstall Documentation
.nf
\fBarchinstall\fP is library which can be used to install Arch Linux.
The library comes packaged with different pre\-configured installers, such as the default \fI\%Guided installation\fP installer.

A demo of the \fI\%Guided installation\fP installer can be seen here: \fI\%https://www.youtube.com/watch?v=9Xt7X_Iqg6E\fP\&.
.fi
.sp
.sp
Some of the features of Archinstall are:
.INDENT 0.0
.IP \(bu 2
\fBNo external dependencies or installation requirements.\fP Runs without any external requirements or installation processes.
.IP \(bu 2
\fBContext friendly.\fP The library always executes calls in sequential order to ensure installation\-steps don\(aqt overlap or execute in the wrong order. It also supports \fI(and uses)\fP context wrappers to ensure cleanup and final tasks such as \fBmkinitcpio\fP are called when needed.
.IP \(bu 2
\fBFull transparency\fP Logs and insights can be found at \fB/var/log/archinstall\fP both in the live ISO and the installed system.
.IP \(bu 2
\fBAccessibility friendly\fP Archinstall works with \fBespeakup\fP and other accessibility tools thanks to the use of a TUI.
.UNINDENT
.SH GUIDED INSTALLATION
.nf
This is the default script the Arch Linux \fI\%Archinstall package\fP\&.
It will guide you through a very basic installation of Arch Linux.
.fi
.sp
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
There are other scripts and they can be invoked by executing \fIarchinstall <script>\fP \fI(without .py)\fP\&. To see a complete list of scripts, see the source code directory \fI\%examples/\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B The installer has three pre\-requisites:
.INDENT 7.0
.IP \(bu 2
The latest version of \fI\%Arch Linux ISO\fP
.IP \(bu 2
A physical or virtual machine to install on
.IP \(bu 2
A \fI\%working internet connection\fP prior to running archinstall
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
A basic understanding of machines, ISO\-files and command line arguments are needed.
Please read the official \fI\%Arch Linux Wiki\fP to learn more about your future operating system.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
The installer will not configure WiFi before the installation begins. You need to read up on \fI\%Arch Linux networking\fP before you continue.
.UNINDENT
.UNINDENT
.SS Running the guided installation
.sp
To start the installer, run the following in the latest Arch Linux ISO:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
archinstall \-\-script guided
.ft P
.fi
.UNINDENT
.UNINDENT
.nf
The \fB\-\-script guided\fP argument is optional as it\(aqs the default behavior.
But this will use our most guided installation and if you skip all the option steps it will install a minimal Arch Linux experience.
.fi
.sp
.SS Installing directly from a configuration file
.nf
The guided installation also supports installing with pre\-configured answers to all the guided steps.
This can be a quick and convenient way to re\-run one or several installations.

After each successful installation a pre\-configured configuration will be found at \fB/var/log/archinstall\fP both on the live media and the installed system.
.fi
.sp
.INDENT 0.0
.TP
.B There are three different configuration files, all of which are optional.
.INDENT 7.0
.IP \(bu 2
\fB\-\-config\fP that deals with the general configuration of language and which profiles to use.
.IP \(bu 2
\fB\-\-creds\fP which takes any \fBsuperuser\fP, \fBuser\fP or \fBroot\fP account data.
.IP \(bu 2
\fB\-\-disk_layouts\fP for defining the desired partition strategy on the selected \fB\(dqharddrives\(dq\fP in \fB\-\-config\fP\&.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
You can always get the latest options with \fBarchinstall \-\-dry\-run\fP, but edit the following json according to your needs.
Save the configuration as a \fB\&.json\fP file. Archinstall can source it via a local or remote path (URL)
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    \(dqaudio\(dq: \(dqpipewire\(dq,
    \(dqbootloader\(dq: \(dqsystemd\-bootctl\(dq,
    \(dqcustom\-commands\(dq: [
        \(dqcd /home/devel; git clone https://aur.archlinux.org/paru.git\(dq,
        \(dqchown \-R devel:devel /home/devel/paru\(dq,
        \(dqusermod \-aG docker devel\(dq
    ],
    \(dqfilesystem\(dq: \(dqbtrfs\(dq,
    \(dqgfx_driver\(dq: \(dqVMware / VirtualBox (open\-source)\(dq,
    \(dqharddrives\(dq: [
        \(dq/dev/nvme0n1\(dq
    ],
    \(dqswap\(dq: true,
    \(dqhostname\(dq: \(dqdevelopment\-box\(dq,
    \(dqkernels\(dq: [
        \(dqlinux\(dq
    ],
    \(dqkeyboard\-language\(dq: \(dqus\(dq,
    \(dqmirror\-region\(dq: \(dqWorldwide\(dq,
    \(dqnic\(dq: {
        \(dqtype\(dq: \(dqNM\(dq
    },
    \(dqntp\(dq: true,
    \(dqpackages\(dq: [\(dqdocker\(dq, \(dqgit\(dq, \(dqwget\(dq, \(dqzsh\(dq],
    \(dqprofile\(dq: \(dqgnome\(dq,
    \(dqservices\(dq: [\(dqdocker\(dq],
    \(dqsys\-encoding\(dq: \(dqutf\-8\(dq,
    \(dqsys\-language\(dq: \(dqen_US\(dq,
    \(dqtimezone\(dq: \(dqUS/Eastern\(dq,
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To use it, assuming you put it on \fBhttps://domain.lan/config.json\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
archinstall \-\-config https://domain.lan/config.json
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Options for \fB\-\-config\fP
.sp
\fI(To see which keys are required, scroll to the right in the above table.)\fP
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
[1] If no entries are found in \fBharddrives\fP, archinstall guided installation will use whatever is mounted currently under \fB/mnt/archinstall\fP\&.
.UNINDENT
.UNINDENT
.SS Options for \fB\-\-creds\fP
.nf
Creds is a separate configuration file to separate normal options from more sensitive data like passwords.
Below is an example of how to set the root password and below that are description of other values that can be set.
.fi
.sp
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    \(dq!root\-password\(dq : \(dqSecretSanta2022\(dq
}
.ft P
.fi
.UNINDENT
.UNINDENT
.TS
center;
|l|l|l|l|.
_
T{
Key
T}	T{
Values
T}	T{
Description
T}	T{
Required
T}
_
T{
!encryption\-password
T}	T{
any
T}	T{
Password to encrypt disk, not encrypted if password not provided
T}	T{
No
T}
_
T{
!root\-password
T}	T{
any
T}	T{
The root account password
T}	T{
No
T}
_
T{
!users
T}	T{
.INDENT 0.0
.TP
.B { \(dqusername\(dq: \(dq<USERNAME>\(dq
\(dq!password\(dq: \(dq<PASSWORD>\(dq,
\(dqsudo\(dq: false|true}
.UNINDENT
T}	T{
List of regular user credentials, see configuration for reference
T}	T{
No
T}
_
.TE
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
[1] \fB!users\fP is optional only if \fB!root\-password\fP was set. \fB!users\fP will be enforced otherwise and the minimum amount of users with sudo privileges required will be set to 1.
.UNINDENT
.UNINDENT
.SS Options for \fB\-\-disk_layouts\fP
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
.nf
The layout of \fB\-\-disk_layouts\fP is a bit complicated.
It\(aqs highly recommended that you generate it using \fB\-\-dry\-run\fP which will simulate an installation, without performing any damaging actions on your machine. \fI(no formatting is done)\fP
.fi
.sp
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    \(dq/dev/loop0\(dq: {
        \(dqpartitions\(dq: [
            {
                \(dqboot\(dq: true,
                \(dqencrypted\(dq: false,
                \(dqfilesystem\(dq: {
                    \(dqformat\(dq: \(dqfat32\(dq
                },
                \(dqwipe\(dq: true,
                \(dqmountpoint\(dq: \(dq/boot\(dq,
                \(dqsize\(dq: \(dq513MB\(dq,
                \(dqstart\(dq: \(dq5MB\(dq,
                \(dqtype\(dq: \(dqprimary\(dq
            },
            {
                \(dqbtrfs\(dq: {
                    \(dqsubvolumes\(dq: {
                        \(dq@.snapshots\(dq: \(dq/.snapshots\(dq,
                        \(dq@home\(dq: \(dq/home\(dq,
                        \(dq@log\(dq: \(dq/var/log\(dq,
                        \(dq@pkgs\(dq: \(dq/var/cache/pacman/pkg\(dq
                    }
                },
                \(dqencrypted\(dq: true,
                \(dqfilesystem\(dq: {
                    \(dqformat\(dq: \(dqbtrfs\(dq
                },
                \(dqwipe\(dq: true,
                \(dqmountpoint\(dq: \(dq/\(dq,
                \(dqsize\(dq: \(dq100%\(dq,
                \(dqstart\(dq: \(dq518MB\(dq,
                \(dqtype\(dq: \(dqprimary\(dq
            }
        ],
        \(dqwipe\(dq: true
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.nf
The overall structure is that of \fB{ \(dqblockdevice\-path\(dq : ...}\fP followed by options for that blockdevice.
Each partition has it\(aqs own settings, and the formatting is executed in order \fI(top to bottom in the above example)\fP\&.
Mountpoints is later mounted in order of path traversal, \fB/\fP before \fB/home\fP etc.
.fi
.sp
.TS
center;
|l|l|l|l|.
_
T{
Key
T}	T{
Values
T}	T{
Description
T}	T{
Required
T}
_
T{
filesystem
T}	T{
{ \(dqformat\(dq: \(dqext4 / btrfs / fat32 etc.\(dq }
T}	T{
Filesystem for root and other partitions
T}	T{
Yes
T}
_
T{
boot
T}	T{
<bool>
T}	T{
Marks the partition as bootable
T}	T{
No
T}
_
T{
encrypted
T}	T{
<bool>
T}	T{
Mark the partition for encryption
T}	T{
No
T}
_
T{
mountpoint
T}	T{
/path
T}	T{
Relative to the inside of the installation, where should the partition be mounted
T}	T{
Yes
T}
_
T{
start
T}	T{
<size><B, MiB, GiB, %, etc>
T}	T{
The start position of the partition
T}	T{
Yes
T}
_
T{
type
T}	T{
primary
T}	T{
Only used if MBR and BIOS is used. Marks what kind of partition it is.
T}	T{
No
T}
_
T{
btrfs
T}	T{
{ \(dqsubvolumes\(dq: {\(dqsubvolume\(dq: \(dqmountpoint\(dq}}
T}	T{
Support for btrfs subvolumes for a given partition
T}	T{
No
T}
_
.TE
.SH DISCORD
.sp
There\(aqs a discord channel which is frequented by some \fI\%contributors\fP\&.
.nf
To join the server, head over to \fI\%https://discord.gg/cqXU88y\fP and join in.
There\(aqs not many rules other than common sense and to treat others with respect. The general chat is for off\-topic things as well.
.fi
.sp
.sp
There\(aqs the \fB@Party Animals\fP role if you want notifications of new releases which is posted in the \fB#Release Party\fP channel.
Another thing is the \fB@Contributors\fP role can be activated by contributors by writing \fB!verify\fP and follow the verification process.
.sp
Hop in, we hope to see you there! : )
.SH ISSUE TRACKER & BUGS
.sp
Issues and bugs should be reported over at \fI\%https://github.com/archlinux/archinstall/issues\fP\&.
.sp
General questions, enhancements and security issues can be reported over there too.
For quick issues or if you need help, head over to the Discord server which has a help channel.
.SS Log files
.nf
When submitting a help ticket, please include the \fB/var/log/archinstall/install.log\fP\&.
It can be found both on the live ISO but also in the installed filesystem if the base packages were strapped in.
.fi
.sp
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
.nf
An easy way to submit logs is \fBcurl \-F\(aqfile=@/var/log/archinstall/install.log\(aq https://0x0.st\fP\&.
Use caution when submitting other log files, but \fBarchinstall\fP pledges to keep \fBinstall.log\fP safe for posting publicly!
.fi
.sp
.UNINDENT
.UNINDENT
.nf
There are additional log files under \fB/var/log/archinstall/\fP that can be useful:
.fi
.sp
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fB/var/log/archinstall/user_configuration.json\fP \- Stores most of the guided answers in the installer
.IP \(bu 2
\fB/var/log/archinstall/user_credentials.json\fP \- Stores any usernames or passwords, can be passed to \fB\-\-creds\fP
.IP \(bu 2
\fB/var/log/archinstall/user_disk_layouts.json\fP \- Stores the chosen disks and their layouts
.IP \(bu 2
\fB/var/log/archinstall/install.log\fP \- A log file over what steps were taken by archinstall
.IP \(bu 2
\fB/var/log/archinstall/cmd_history.txt\fP \- A complete command history, command by command in order
.IP \(bu 2
\fB/var/log/archinstall/cmd_output.txt\fP \- A raw output from all the commands that were executed by archinstall
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
We only try to guarantee that \fB/var/log/archinstall/install.log\fP is free from sensitive information.
Any other log file should be pasted with \fButmost care\fP!
.UNINDENT
.UNINDENT
.SH PYTHON LIBRARY
.sp
Archinstall ships on \fI\%PyPi\fP as \fI\%archinstall\fP\&.
But the library can be installed manually as well.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
These steps are not required if you want to use archinstall on the official Arch Linux ISO.
.UNINDENT
.UNINDENT
.SS Installing with pacman
.sp
Archinstall is on the \fI\%official repositories\fP\&.
And it will also install archinstall as a python library.
.sp
To install both the library and the archinstall script:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pacman \-S archinstall
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Alternatively, you can install only the library and not the helper executable using the \fBpython\-archinstall\fP package.
.SS Installing with PyPi
.sp
The basic concept of PyPi applies using \fIpip\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pip install archinstall
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Install using source code
.nf
You can also install using the source code.
For sake of simplicity we will use \fBgit clone\fP in this example.
.fi
.sp
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
git clone https://github.com/archlinux/archinstall
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can either move the folder into your project and simply do
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import archinstall
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Or you can use \fI\%setuptools\fP to install it into the module path.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo python setup.py install
.ft P
.fi
.UNINDENT
.UNINDENT
.SH PYTHON MODULE
.sp
Archinstall supports running in \fI\%module mode\fP\&.
The way the library is invoked in module mode is limited to executing scripts under the \fBexample\fP folder.
.sp
It\(aqs therefore important to place any script or profile you wish to invoke in the examples folder prior to building and installing.
.SS Pre\-requisites
.sp
We\(aqll assume you\(aqve followed the \fI\%Install using source code\fP method.
Before actually installing the library, you will need to place your custom installer\-scripts under \fI\&./archinstall/examples/\fP as a python file.
.sp
More on how you create these in the next section.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This is subject to change in the future as this method is currently a bit stiff. The script path will become a parameter. But for now, this is by design.
.UNINDENT
.UNINDENT
.SS Creating a script
.sp
Lets create a \fItest_installer\fP \- installer as an example. This is assuming that the folder \fI\&./archinstall\fP is a git\-clone of the main repo.
We begin by creating \fI\&./archinstall/examples/test_installer.py\fP\&. The placement here is important later.
.sp
This script can now already be called using \fIpython \-m archinstall test_installer\fP after a successful installation of the library itself.
But the script won\(aqt do much. So we\(aqll do something simple like list all the hard drives as an example.
.sp
To do this, we\(aqll begin by importing \fIarchinstall\fP in our \fI\&./archinstall/examples/test_installer.py\fP and call some functions.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import archinstall

all_drives = archinstall.list_drives()
print(all_drives)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This should print out a list of drives and some meta\-information about them.
As an example, this will do just fine.
.sp
Now, go ahead and install the library either as a user\-module or system\-wide.
.SS Calling a module
.sp
Assuming you\(aqve followed the example in \fI\%Creating a script\fP, you can now safely call it with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
python \-m archinstall test_installer
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This should now print all available drives on your system.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This should work on any system, not just Arch Linux based ones. But note that other functions in the library rely heavily on Arch Linux based commands to execute the installation steps. Such as \fIarch\-chroot\fP\&.
.UNINDENT
.UNINDENT
.SH BINARY EXECUTABLE
.sp
Archinstall can be compiled into a standalone executable.
For Arch Linux based systems, there\(aqs a package for this called \fI\%archinstall\fP\&.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This is not required if you\(aqre running archinstall on a pre\-built ISO. The installation is only required if you\(aqre creating your own scripted installations.
.UNINDENT
.UNINDENT
.SS Using pacman
.sp
Archinstall is on the \fI\%official repositories\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo pacman \-S archinstall
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Using PKGBUILD
.sp
The \fI\%source\fP contains a binary \fI\%PKGBUILD\fP which can be either copied straight off the website or cloned using \fBgit clone https://github.com/Torxed/archinstall\fP\&.
.sp
Once you\(aqve obtained the \fIPKGBUILD\fP, building it is pretty straight forward.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
makepkg \-s
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Which should produce an \fIarchinstall\-X.x.z\-1.pkg.tar.zst\fP which can be installed using:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo pacman \-U archinstall\-X.x.z\-1.pkg.tar.zst
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
For a complete guide on the build process, please consult the \fI\%PKGBUILD on ArchWiki\fP\&.
.UNINDENT
.UNINDENT
.SS Manual compilation
.sp
You can compile the source manually without using a custom mirror or the \fIPKGBUILD\fP that is shipped.
Simply clone or download the source, and while standing in the cloned folder \fI\&./archinstall\fP, execute:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
nuitka3  \-\-standalone \-\-show\-progress archinstall
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This requires the \fI\%nuitka\fP package as well as \fIpython3\fP to be installed locally.
.SH BINARY EXECUTABLE
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
The binary option is limited and stiff. It\(aqs hard to modify or create your own installer\-scripts this way unless you compile the source manually. If your usecase needs custom scripts, either use the pypi setup method or you\(aqll need to adjust the PKGBUILD prior to building the arch package.
.UNINDENT
.UNINDENT
.sp
The binary executable is a standalone compiled version of the library.
It\(aqs compiled using \fI\%nuitka\fP with the flag \fI\-\-standalone\fP\&.
.SS Executing the binary
.sp
As an example we\(aqll use the \fI\%guided\fP installer.
To run the \fIguided\fP installed, all you have to do \fI(after installing or compiling the binary)\fP, is run:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&./archinstall guided
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As mentioned, the binary is a bit rudimentary and only supports executing whatever is found directly under \fI\&./archinstall/examples\fP\&.
Anything else won\(aqt be found. This is subject to change in the future to make it a bit more flexible.
.SH ARCHINSTALL.INSTALLER
.sp
The installer is the main class for accessing an installation\-instance.
You can look at this class as the installation you have or will perform.
.sp
Anything related to \fBinside\fP the installation, will be found in this class.
.INDENT 0.0
.TP
.B archinstall.Installer(target:  str, *, base_packages:  Optional[List[str]]  =  None, kernels:  Optional[List[str]]  =  None)
\fIInstaller()\fP is the wrapper for most basic installation steps.
It also wraps \fBpacstrap()\fP among other things.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBpartition\fP (class:\fIarchinstall.Partition\fP) \-\- Requires a partition as the first argument, this is
so that the installer can mount to \fImountpoint\fP and strap packages there.
.IP \(bu 2
\fBboot_partition\fP (class:\fIarchinstall.Partition\fP) \-\- There\(aqs two reasons for needing a boot partition argument,
The first being so that \fImkinitcpio\fP can place the \fIvmlinuz\fP kernel at the right place
during the \fIpacstrap\fP or \fIlinux\fP and the base packages for a minimal installation.
The second being when \fBadd_bootloader()\fP is called,
A \fIboot_partition\fP must be known to the installer before this is called.
.IP \(bu 2
\fBprofile\fP (\fIstr\fP\fI, \fP\fIoptional\fP) \-\- A profile to install, this is optional and can be called later manually.
This just simplifies the process by not having to call \fBinstall_profile()\fP later on.
.IP \(bu 2
\fBhostname\fP (\fIstr\fP\fI, \fP\fIoptional\fP) \-\- The given /etc/hostname for the machine.
.UNINDENT
.UNINDENT
.UNINDENT
.SH ARCHINSTALL.PROFILE
.sp
This class enables access to pre\-programmed profiles.
This is not to be confused with \fI\%archinstall.Application\fP which is for pre\-programmed application profiles.
.sp
Profiles in general is a set or group of installation steps.
Where as applications are a specific set of instructions for a very specific application.
.sp
An example would be the \fI(currently fictional)\fP profile called \fIdatabase\fP\&.
The profile \fIdatabase\fP might contain the application profile \fIpostgresql\fP\&.
And that\(aqs the difference between \fI\%archinstall.Profile\fP and \fI\%archinstall.Application\fP\&.
.INDENT 0.0
.TP
.B archinstall.Profile(installer:  Optional[Installer], path:  str)
.UNINDENT
.SH ARCHINSTALL.APPLICATION
.sp
This class enables access to pre\-programmed application configurations.
This is not to be confused with \fI\%archinstall.Profile\fP which is for pre\-programmed profiles for a wider set of installation sets.
.INDENT 0.0
.TP
.B archinstall.Application(installer:  Optional[Installer], path:  str)
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
All these helper functions are mostly, if not all, related to outside\-installation\-instructions. Meaning the calls will affect your current running system \- and not touch your installed system.
.UNINDENT
.UNINDENT
.SH PROFILE RELATED HELPERS
.INDENT 0.0
.TP
.B archinstall.list_profiles(filter_irrelevant_macs:  bool  =  True, subpath:  str  =  \(aq\(aq, filter_top_level_profiles:  bool  =  False) -> Dict[str,  Dict[str,  Union[str,  bool]]]
.UNINDENT
.SH PACKAGES
.INDENT 0.0
.TP
.B archinstall.find_package(package:  str) -> List[PackageSearchResult]
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.find_packages(*names:  str) -> Dict[str,  Any]
This function returns the search results for many packages.
The function itself is rather slow, so consider not sending to
many packages to the search query.
.UNINDENT
.SH LOCALE RELATED
.INDENT 0.0
.TP
.B archinstall.list_keyboard_languages() -> Iterator[str]
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.search_keyboard_layout(layout:  str) -> Iterator[str]
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.set_keyboard_language(locale:  str) -> bool
.UNINDENT
.SH SERVICES
.INDENT 0.0
.TP
.B archinstall.service_state(service_name:  str) -> str
.UNINDENT
.SH MIRRORS
.INDENT 0.0
.TP
.B archinstall.filter_mirrors_by_region(regions:  str, destination:  str  =  \(aq/etc/pacman.d/mirrorlist\(aq, sort_order:  List[str]  =  [\(aqhttps\(aq, \(aqhttp\(aq], *args:  str, **kwargs:  str) -> Union[bool,  bytes]
This function will change the active mirrors on the live medium by
filtering which regions are active based on \fIregions\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBregions\fP (\fIstr\fP) \-\- A series of country codes separated by \fI,\fP\&. For instance \fISE,US\fP for sweden and United States.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.add_custom_mirrors(mirrors:  List[str], *args:  str, **kwargs:  str) -> bool
This will append custom mirror definitions in pacman.conf
.INDENT 7.0
.TP
.B Parameters
\fBmirrors\fP (\fIdict\fP) \-\- A list of mirror data according to: \fI{\(aqurl\(aq: \(aqhttp://url.com\(aq, \(aqsigncheck\(aq: \(aqOptional\(aq, \(aqsignoptions\(aq: \(aqTrustAll\(aq, \(aqname\(aq: \(aqtestmirror\(aq}\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.insert_mirrors(mirrors:  Dict[str,  Any], *args:  str, **kwargs:  str) -> bool
This function will insert a given mirror\-list at the top of \fI/etc/pacman.d/mirrorlist\fP\&.
It will not flush any other mirrors, just insert new ones.
.INDENT 7.0
.TP
.B Parameters
\fBmirrors\fP (\fIdict\fP) \-\- A dictionary of \fI{\(aqurl\(aq : \(aqcountry\(aq, \(aqurl2\(aq : \(aqcountry\(aq}\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.use_mirrors(regions:  Mapping[str,  Iterable[str]], destination:  str  =  \(aq/etc/pacman.d/mirrorlist\(aq) -> None
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.re_rank_mirrors(top:  int  =  10, src:  str  =  \(aq/etc/pacman.d/mirrorlist\(aq, dst:  str  =  \(aq/etc/pacman.d/mirrorlist\(aq) -> bool
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.list_mirrors(sort_order:  List[str]  =  [\(aqhttps\(aq, \(aqhttp\(aq]) -> Dict[str,  Any]
.UNINDENT
.SH DISK RELATED
.INDENT 0.0
.TP
.B archinstall.BlockDevice(path:  str, info:  Optional[Dict[str,  Any]]  =  None)
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.Partition(path:  str, block_device:  BlockDevice, part_id:  Optional[str]  =  None, filesystem:  Optional[str]  =  None, mountpoint:  Optional[str]  =  None, encrypted:  bool  =  False, autodetect_filesystem:  bool  =  True)
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.Filesystem(blockdevice:  BlockDevice, mode:  int)
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.device_state(name:  str, *args:  str, **kwargs:  str) -> Optional[bool]
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.all_blockdevices(mappers:  bool  =  False, partitions:  bool  =  False, error:  bool  =  False, exclude_iso_dev:  bool  =  True) -> Dict[str,  Any]
Returns BlockDevice() and Partition() objects for all available devices.
.UNINDENT
.SH LUKS (DISK ENCRYPTION)
.INDENT 0.0
.TP
.B archinstall.luks2(partition:  Partition, mountpoint:  Optional[str], password:  Optional[str], key_file:  Optional[str]  =  None, auto_unmount:  bool  =  False, *args:  str, **kwargs:  str)
.UNINDENT
.SH NETWORKING
.INDENT 0.0
.TP
.B archinstall.get_hw_addr(ifname:  str) -> str
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.list_interfaces(skip_loopback:  bool  =  True) -> Dict[str,  str]
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.check_mirror_reachable() -> bool
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.update_keyring() -> bool
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.enrich_iface_types(interfaces:  Union[Dict[str,  Any],  List[str]]) -> Dict[str,  str]
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.get_interface_from_mac(mac:  str) -> str
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.wireless_scan(interface:  str) -> None
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.get_wireless_networks(interface:  str) -> None
.UNINDENT
.SH GENERAL
.INDENT 0.0
.TP
.B archinstall.log(*args:  str, **kwargs:  Union[str,  int,  Dict[str,  Union[str,  int]]]) -> None
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.locate_binary(name:  str) -> str
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.SysCommand(cmd:  Union[str,  List[str]], callbacks:  Optional[Dict[str,  Callable[[Any],  Any]]]  =  None, start_callback:  Optional[Callable[[Any],  Any]]  =  None, peak_output:  Optional[bool]  =  False, environment_vars:  Optional[Dict[str,  Any]]  =  None, working_directory:  Optional[str]  =  \(aq./\(aq, remove_vt100_escape_codes_from_lines:  bool  =  True)
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.SysCommandWorker(cmd:  Union[str,  List[str]], callbacks:  Optional[Dict[str,  Any]]  =  None, peak_output:  Optional[bool]  =  False, environment_vars:  Optional[Dict[str,  Any]]  =  None, logfile:  Optional[None]  =  None, working_directory:  Optional[str]  =  \(aq./\(aq, remove_vt100_escape_codes_from_lines:  bool  =  True)
.UNINDENT
.SH EXCEPTIONS
.INDENT 0.0
.TP
.B archinstall.RequirementError()
Common base class for all exceptions
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.DiskError()
Common base class for all exceptions
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.ProfileError()
Common base class for all exceptions
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.SysCallError(message:  str, exit_code:  Optional[int]  =  None, worker:  Optional[SysCommandWorker]  =  None) -> None
Common base class for all exceptions
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.ProfileNotFound()
Common base class for all exceptions
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.HardwareIncompatibilityError()
Common base class for all exceptions
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.PermissionError()
Common base class for all exceptions
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.UserError()
Common base class for all exceptions
.UNINDENT
.INDENT 0.0
.TP
.B archinstall.ServiceException()
Common base class for all exceptions
.UNINDENT
.SH AUTHOR
Anton Hvornum
.SH COPYRIGHT
2022, Anton Hvornum
.\" Generated by docutils manpage writer.
.
