.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "BTRFSTUNE" "8" "Nov 06, 2022" "6.0.1" "BTRFS"
.SH NAME
btrfstune \- tune various filesystem parameters
.SH SYNOPSIS
.sp
\fBbtrfstune\fP [options] <device> [<device>...]
.SH DESCRIPTION
.sp
\fBbtrfstune\fP can be used to enable, disable, or set various filesystem
parameters. The filesystem must be unmounted.
.sp
The common usecase is to enable features that were not enabled at mkfs time.
Please make sure that you have kernel support for the features.  You can find a
complete list of features and kernel version of their introduction at
\fI\%https://btrfs.wiki.kernel.org/index.php/Changelog#By_feature\fP .  Also, the
manual page \fI\%mkfs.btrfs(8)\fP contains more details about the features.
.sp
Some of the features could be also enabled on a mounted filesystem by other
means.  Please refer to the \fIFILESYSTEM FEATURES\fP in \fI\%btrfs(5)\fP\&.
.SH OPTIONS
.INDENT 0.0
.TP
.B  \-b
(since kernel 6.1, needs experimental build of btrfs\-progs)
Enable block group tree feature (greatly reduce mount time),
enabled by mkfs feature \fIblock\-group\-tree\fP\&.
.TP
.B  \-f
Allow dangerous changes, e.g. clear the seeding flag or change fsid.
Make sure that you are aware of the dangers.
.TP
.B  \-m
(since kernel: 5.0)
.sp
change fsid stored as \(aqmetadata_uuid\(aq to a randomly generated UUID,
see also \(aq\-U\(aq
.TP
.BI \-M \ <UUID>
(since kernel: 5.0)
.sp
change fsid stored as \fImetadata_uuid\fP to a given UUID, see also \fI\-U\fP
.sp
The metadata_uuid is stored only in the superblock and is a backward
incompatible change. The fsid in metadata blocks remains unchanged and
is not overwritten, thus the whole operation is significantly faster
than \fI\-U\fP\&.
.sp
The new metadata_uuid can be used for mount by UUID and is also used to
identify devices of a multi\-device filesystem.
.TP
.B  \-n
(since kernel: 3.14)
.sp
Enable no\-holes feature (more efficient representation of file holes),
enabled by mkfs feature \fIno\-holes\fP\&.
.TP
.B  \-r
(since kernel: 3.7)
.sp
Enable extended inode refs (hardlink limit per file in a directory is
65536), enabled by mkfs feature \fIextref\fP\&.
.TP
.BI \-S \ <0|1>
Enable seeding on a given device. Value 1 will enable seeding, 0 will
disable it.  A seeding filesystem is forced to be mounted read\-only. A
new device can be added to the filesystem and will capture all writes
keeping the seeding device intact.  See also section \fISEEDING DEVICE\fP
in \fI\%btrfs(5)\fP\&.
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Clearing the seeding flag on a device may be dangerous.  If a
previously\-seeding device is changed, all filesystems that used
that device will become unmountable. Setting the seeding flag
back will not fix that.
.sp
A valid usecase is \(aqseeding device as a base image\(aq. Clear the
seeding flag, update the filesystem and make it seeding again,
provided that it\(aqs OK to throw away all filesystems built on
top of the previous base.
.UNINDENT
.UNINDENT
.TP
.B  \-u
Change fsid to a randomly generated UUID or continue previous fsid
change operation in case it was interrupted.
.TP
.BI \-U \ <UUID>
Change fsid to \(aqUUID\(aq in all metadata blocks.
.sp
The \fIUUID\fP should be a 36 bytes string in \fBprintf(3)\fP format
\fI\(dq%08x\-%04x\-%04x\-%04x\-%012x\(dq\fP\&.
If there is a previous unfinished fsid change, it will continue only if the
\fIUUID\fP matches the unfinished one or if you use the option \fI\-u\fP\&.
.sp
All metadata blocks are rewritten, this may take some time, but the final
filesystem compatibility is unaffected, unlike \fI\-M\fP\&.
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Cancelling or interrupting a UUID change operation will make
the filesystem temporarily unmountable.  To fix it, rerun
\fIbtrfstune \-u\fP and let it complete.
.UNINDENT
.UNINDENT
.TP
.B  \-x
(since kernel: 3.10)
.sp
Enable skinny metadata extent refs (more efficient representation of
extents), enabled by mkfs feature \fIskinny\-metadata\fP\&.
.sp
All newly created extents will use the new representation. To
completely switch the entire filesystem, run a full balance of the
metadata. Please refer to \fI\%btrfs\-balance(8)\fP\&.
.UNINDENT
.SH EXIT STATUS
.sp
\fBbtrfstune\fP returns 0 if no error happened, 1 otherwise.
.SH COMPATIBILITY NOTE
.sp
This deprecated tool exists for historical reasons but is still in use today.
Its functionality will be merged to the main tool, at which time \fBbtrfstune\fP
will be declared obsolete and scheduled for removal.
.SH SEE ALSO
.sp
\fI\%btrfs(5)\fP,
\fI\%btrfs\-balance(8)\fP,
\fI\%mkfs.btrfs(8)\fP
.SH COPYRIGHT
2022
.\" Generated by docutils manpage writer.
.
